// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {

    ext{
        retrofit_version = "2.5.0"
        moshi_version = "1.8.0"
        recyclerview_version = "1.0.0"
        glide_version = '4.9.0'
        gradle_version = "3.5.1"
        card_view_version = "1.0.0"
        kotlin_coroutines_version = "1.1.0"
        retrofit_coroutines_adapter_version = "0.9.2"
        kotlin_version = "1.3.50"
        ktlint_version = '0.35.0'
        room_version = "2.0.0"
        gson_version = "2.8.6"
        material_design_version = "1.1.0"
        view_model_version = "1.1.1"
        constraint_layout_version = "1.1.3"
        app_compat_version = "1.1.0"
        core_ktx_version = "1.2.0"
        legacy_support_version = "1.0.0"
        junit_version = "1.1.1"
        espresso_version = "3.2.0"
    }

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
    configurations {
        ktlint
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven{url 'https://jitpack.io'}
    }
}

task customClean(type: Delete) {
    delete rootProject.buildDir
}
// ktlint setup
apply plugin: "java"
configurations {
    ktlint
}
dependencies {
    ktlint "com.pinterest:ktlint:$ktlint_version"
}
task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "*/.kt", "!*/bin//.kt", "!**/*InstrumentedTest.kt", "--reporter=plain?group_by_file&color", "no-wildcard-imports = false"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "*/.kt", "!*/bin//.kt", "!**/*InstrumentedTest.kt", "--reporter=plain?group_by_file&color", "no-wildcard-imports = false"
}

task cleanKlint(type: Delete) {
    delete rootProject.buildDir
}

check.dependsOn ktlint
clean.dependsOn customClean